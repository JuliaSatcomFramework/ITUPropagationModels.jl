var documenterSearchIndex = {"docs":
[{"location":"api/main/#Main-Functions","page":"API Reference","title":"Main Functions","text":"","category":"section"},{"location":"api/main/","page":"API Reference","title":"API Reference","text":"note: Note\nAll functions support as input Unitful.Quantity values for frequency (e.g. Hz), angles (° or rad) and length (e.g. m, but only for values which are expected in km like the location altitude or the rain height hᵣ)","category":"page"},{"location":"api/main/","page":"API Reference","title":"API Reference","text":"The primary interface for calculating atmospheric attenuations.","category":"page"},{"location":"api/main/#Primary-Function","page":"API Reference","title":"Primary Function","text":"","category":"section"},{"location":"api/main/#ITUPropagationModels.ItuRP618.attenuations","page":"API Reference","title":"ITUPropagationModels.ItuRP618.attenuations","text":"attenuations(latlon, f, el, p; D, η, alt, polarization, polarization_angle, warn, extra_kwargs...)\nattenuations(lat::Number, lon::Number, args...; kwargs...)\n\nComputes the various attenuations for earth/space links based on Section 2.4.1 of ITU-R P618-14.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\nf: frequency (GHz)\nel: elevation angle (degrees)\np: exceedance probability (%)\n\nKeyword Arguments\n\nD: antenna diameter (m)\nη (also accepted as efficiency): antenna efficiency (% from 0 to 100, defaults to 60).\nalt: altitude of ground station (km). Defaults to ItuRP1511.topographicheight(latlon)\npolarization: polarization (EnumHorizontalPolarization, EnumVerticalPolarization, or EnumCircularPolarization)\npolarization_angle: tilt angle [degrees] of the electric field polarization w.r.t. horizontal polarization. Note: This field is computed from the polarization argument if not provided, but this function disregards the polarization argument if polarization_angle is explicitly provided.\nwarn: Whether to warn if the inputs are outside the supported range. Defaults to !SUPPRESS_WARNINGS[]\n\nnote: Note\nThis function returns 0.0 for all attenuations if p > 50 and caps the outage to p = 0.001 if p < 0.001. See the extended help for more details on how to override this behavior to keep extrapolating the attenuations formulas outside these boundaries.\n\nSee extended help for more details on extra keyword arguments and for maximizing the speed of the computation when some intermediate inputs are known.\n\nReturn\n\n(;At, Ac, Ag, Ar, As): Named tuple with total, cloud, gas, rain, and scintillation attenuations (dB)\n\nExtended help\n\nThis function accepts some additional keyword arguments that are intermediate inputs to the computation, and can be provided to maximize the speed of the computation. These extra_kwargs are:\n\nAg_zenith: Zenith gaseous attenuation (dB/km) at zenith (90° elevation)\nAc_zenith: Zenith cloud attenuation (dB/km) at zenith (90° elevation)\nNwet: Wet term surface refractivity (N-units)\nR001: Annual rain rate [mm/h] exceeded 0.01% of the time.\nhᵣ: Rain height [Km] to be used for the computation.\ngamma_oxygen (also accepted as γₒ): Specific attenuation due to oxygen (dB/km) computed from the average surface conditions, at the desired location. Note: This is used to speed up the computation of Ag_zenith but is ignored if the Ag_zenith argument is provided\npabove_zero::Bool: Whether to set all attenuations to 0.0 if p > 50. Defaults to true\npbelow_cap::Bool: Whether to set p to 0.001 if p < 0.001. Defaults to true\n\nAdditionally, the function can be called with Val(true) as last positional argument (after p) to also return the various intermediate inputs used in the computation for speeding up subsequent calls where only the elevation angle changes. Here is an example on how to use this when needing to compute attenuations for a given ground location towards multiple satellites at different elevation angles:\n\nFast computation example\n\nels = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nll = LatLon(0,0)\np = .5 # .5% outage\nD = 1 # 1m antenna diameter\n# We compute the attenuations for the first elevation angle and save also the various intermediate values stored in the `kwargs` field of the output.\nnt = ItuRP618.attenuations(ll, 30, first(els), p, Val(true); D)\n# We create a vector of outputs for different elevations exploiting the precomputed kwargs\nouts = map(eachindex(els)) do i\n    i == 1 && return nt.attenuations\n    ItuRP618.attenuations(ll, 30, els[i], p; nt.kwargs...)\nend\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITUPropagationModels.attenuations_intermediate_terms","page":"API Reference","title":"ITUPropagationModels.attenuations_intermediate_terms","text":"attenuations_intermediate_terms(latlon, f; kwargs...)\n\nThis function computes all the intermediate terms that can speed up the computation of the P618 attenuations and that only depend on the location (i.e. Latitude and Longitude) and the frequency.\n\nThis function is useful when the troposheri attenuations (from P618) need to be computed multiple times for the same location and frequency as saving this terms and using them by passing them to the attenuations function is more than twice as fast.\n\nArguments\n\nlatlon: Object specifying the latitude and longitude of the location of interest, must be an object that can be converted to an instance of ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\nf: frequency (GHz)\n\nComputed terms\n\nNwet: Wet term surface refractivity (N-units)\nhᵣ: Rain height [Km] to be used for the computation.\nalt: Altitude [km] of the receiver. Defaults to ItuRP1511.topographicheight(latlon)\nR001: Annual rain rate [mm/h] exceeded 0.01% of the time.\nγₒ: Mean surface specific attenuation due to oxygen (dB/km)\n\nnote: Overriding some inputs\nAll of the computed terms can be overridden by providing the intended value as keyword argument with the same name. For simplicity, the two following terms also accept an alternative name when provided as keyword argument:h_r for hᵣ (The Rain Height term [km])\ngamma_oxygen for γₒ (The Mean Surface Specific Attenuation Due to Oxygen term [dB/km])\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITU-R-P.453-Refractivity","page":"API Reference","title":"ITU-R P.453 - Refractivity","text":"","category":"section"},{"location":"api/main/#ITUPropagationModels.ItuRP453.wettermsurfacerefractivityannual","page":"API Reference","title":"ITUPropagationModels.ItuRP453.wettermsurfacerefractivityannual","text":"wettermsurfacerefractivityannual(latlon, p)\nwettermsurfacerefractivityannual(lat::Number, lon::Number, args...; kwargs...)\n\nInterpolates wet term of the surface refractivity at an exceedance probability p provided as input in % based on Section 2.2.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\np: exceedance probability (%)   \n\nReturn\n\nNwet::Real: wet term of the surface refractivity (ppm)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITUPropagationModels.ItuRP453.wettermsurfacerefractivityannual_50","page":"API Reference","title":"ITUPropagationModels.ItuRP453.wettermsurfacerefractivityannual_50","text":"wettermsurfacerefractivityannual_50(latlon)\nwettermsurfacerefractivityannual_50(lat::Number, lon::Number, args...; kwargs...)\n\nReturns the wet term of surface refractivity at 50% exceedance probability (Based on annual data) at the desired location\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITU-R-P.618-Rain-Attenuation-and-Scintillation","page":"API Reference","title":"ITU-R P.618 - Rain Attenuation and Scintillation","text":"","category":"section"},{"location":"api/main/#ITUPropagationModels.ItuRP618.rainattenuation","page":"API Reference","title":"ITUPropagationModels.ItuRP618.rainattenuation","text":"rainattenuation(latlon, f, el, p; polarization::IturEnum=EnumCircularPolarization, kwargs...)\nrainattenuation(lat::Number, lon::Number, args...; kwargs...)\n\nComputes rain attenuation based on Section 2.2.1.1.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\nf::Real: frequency (GHz),\nel::Real: elevation angle (degrees)\np::Real: exceedance probability (%)\n\nKeyword Arguments\n\nh_r or hᵣ: Rain height [Km] to be used for the computation. Defaults to ItuRP1511.topographicheight(lat, lon)\npolarization::IturEnum=EnumCircularPolarization: polarization (EnumHorizontalPolarization, EnumVerticalPolarization, or EnumCircularPolarization) \nNote that this last argument is overridden by the keyword argument polarization_angle if provided\npolarization_angle: Tilt angle [degrees] of the electric field polarization w.r.t. horizontal polarization. Defaults to 45, corresponding to a circularly polarized field.\nalt: Altitude [km] of the receiver. Defaults to ItuRP1511.topographicheight(latlon)\nR001: Annual rain rate [mm/h] exceeded 0.01% of the time. Defaults to ItuRP837.rainfallrate001(latlon)\nwarn: Whether to warn if the inputs are outside the supported range. Defaults to !SUPPRESS_WARNINGS[]\n\nReturn\n\nAp::Float64: rain attenuation (dB)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITUPropagationModels.ItuRP618.scintillationattenuation","page":"API Reference","title":"ITUPropagationModels.ItuRP618.scintillationattenuation","text":"scintillationattenuation(latlon::LatLon, f::Real, el::Real, p::Real; D::Real=1.0, η::Real=60.0)\nscintillationattenuation(lat::Number, lon::Number, args...; kwargs...)\n\nComputes scintillation attenuation based on Section 2.4.1.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\nf::Real: frequency (GHz)\nel::Real: elevation angle (degrees)\np::Real: exceedance probability (%)\n\nKeyword Arguments\n\nD::Real=1.0: antenna diameter (m)\nη::Real=60: antenna efficiency (% from 0 to 100, typically 60). Can also be provided with the name efficiency.\nwarn: Whether to warn if the inputs are outside the supported range. Defaults to !SUPPRESS_WARNINGS[]\n\nReturn\n\nAscintillation::Real: scintillation attenuation (dB)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITU-R-P.676-Gaseous-Attenuation","page":"API Reference","title":"ITU-R P.676 - Gaseous Attenuation","text":"","category":"section"},{"location":"api/main/#ITUPropagationModels.ItuRP676.gaseousattenuation","page":"API Reference","title":"ITUPropagationModels.ItuRP676.gaseousattenuation","text":"Ag = gaseousattenuation(latlon, f, el, p; alt = nothing, gamma_oxygen = nothing, γₒ = nothing)\ngaseousattenuation(lat::Number, lon::Number, args...; kwargs...)\n\nComputes the statistical gaseous attenuation for a slant path following the approximate computation specified in Annex 2 of ITU-R P.676-13.\n\nMore specifically this computes Ag = Ao + Aw implementing:\n\nEquation 32 in Section 1.2 for Oxygen attenuation Ao\nEquation 40 in Section 2.3 for Water vapour attenuation Aw\n\nArguments\n\nlatlon: Object specifying the latitude and longitude of the location of interest, must be an object that can be converted to an instance of ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\nf: frequency (GHz)\nel: elevation angle (degrees)\n\nKeyword arguments\n\nalt: Altitude at the provided location, to be used for computing the various intermediate varaibles. If not provided, default to the altitude computed with ItuRP1511.topographicheight\ngamma_oxygen (or γₒ): Specific attenuation due to oxygen (dB/km) computed from the average surface conditions, at the desired location. This is computed automatically based on other inputs if not explicitly provided, but it is only location dependent and >70% of the time is spent in computing this, so consider precomputing and passing it directly for maximum speed\n\nSee the extended help for the signature of the function with precomputed intermediate variables.\n\nExtended help\n\nAlternative method\n\nWhen the values (both average and ccdf) of Pressure, Temeprature and water vapour density are already available, the computation can be made faster by using this alternative method that takes all the useful parameters as keyword arguments.\n\nThis method can also be used to simulated oxygen/gas attenuations based on instantaneous values of the surface parameters as per Sections 1.1 and 2.2 of Annex 2. In this case, the instantaneous values of P, T and ρ should be explicitly provided for the ccdf values with the same name, but also to the kwargs related to mean values (i.e. P̄, T̄ and ρ̄ respectively).\n\ngaseousattenuation(latlon, f, el; kwargs...)\n\nAn additional method is available, for cases where the statistical values of the surface parameters are already available and do not need to be computed internally.\n\nThis method do not accept the outage probability p as last argument but expects he following keyword arguments specifying the various surface paramters (both in mean value and in ccdf statistical value):\n\nP_mean (or P̄): Average surface total pressure (hPa) at the desired location. In case this method is used for simulating attenuation based on instantaneous values, the instantaneous total pressure P should be provided also as value to this kwarg.\nT_mean (or T̄): Average surface temperature (K) at the desired location. In case this method is used for simulating attenuation based on instantaneous values, the instantaneous temperature T should be provided also as value to this kwarg.\nrho_mean (or ρ̄): Average surface water vapour density (g/m^3) at the desired location. In case this method is used for simulating attenuation based on instantaneous values, the instantaneous water vapour density ρ should be provided also as value to this kwarg.\nP: Surface total pressure (hPa) at the desired exceedance probability, at the desired location.\nT: Surface temperature (K) at the desired exceedance probability, at the desired location.\nrho: Surface water vapour density (g/m^3) at the desired exceedance probability, at the desired location.\nV: Surface water vapour content (kg/m^2) at the desired exceedance probability, at the desired location.\ngamma_oxygen (or γₒ): Specific attenuation due to oxygen (dB/km) computed from the average surface conditions, at the desired location. This is computed automatically based on other inputs if not explicitly provided, but it is only location dependent and >70% of the time is spent in computing this, so consider precomputing and passing it directly for maximum speed\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITU-R-P.835-Standard-Atmospheres","page":"API Reference","title":"ITU-R P.835 - Standard Atmospheres","text":"","category":"section"},{"location":"api/main/#ITUPropagationModels.ItuRP835.standardtemperature","page":"API Reference","title":"ITUPropagationModels.ItuRP835.standardtemperature","text":"standardtemperature(Z::Float64)\n\nStandard temperature for geometric heights <= 100 km, based on equations 2a-2g and 4a-4b of Section 1.1\n\nArguments\n\nZ::Float64: geometric height (km)\n\nReturn\n\ntemperature (°K)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITUPropagationModels.ItuRP835.standardpressure","page":"API Reference","title":"ITUPropagationModels.ItuRP835.standardpressure","text":"standardpressure(Z)\n\nStandard pressure for geometric heights <= 100 km, based on equations 3a-3g and 5 of Section 1.1.\n\nArguments\n\nZ: geometric height (km)\n\nReturn\n\ndry pressure (hPa)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITUPropagationModels.ItuRP835.standardwatervapourdensity","page":"API Reference","title":"ITUPropagationModels.ItuRP835.standardwatervapourdensity","text":"standardwatervapourdensity(Z; kwargs...)\n\nStandard water vapour density for geometric heights <= 100 km, based on equations 6-8 of Section 1.2.\n\nArguments\n\nZ: geometric height (km)\n\nKeyword arguments\n\nrho_0::Real=7.5: standard ground level water vapour density (g/m^3). Can also be provided as ρ₀.\nT::Real: Temperature (°K) at given height. Computed with standardtemperature(Z) if not provided.\nP::Real: Total barometric pressure (hPa) at given height. Computed with standardpressure(Z) if not provided.\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITU-R-P.837-Rainfall-Rate","page":"API Reference","title":"ITU-R P.837 - Rainfall Rate","text":"","category":"section"},{"location":"api/main/#ITUPropagationModels.ItuRP837.rainfallrate001","page":"API Reference","title":"ITUPropagationModels.ItuRP837.rainfallrate001","text":"rainfallrate001(latlon)\nrainfallrate001(lat::Number, lon::Number)\n\nComputes rainfall rate exceeded 0.01% via bi-linear interpolation as described in Annex 1.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\n\nReturn\n\nR::Float64: annual rainfall rate exceeded 0.01%\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITU-R-P.838-Rain-Specific-Attenuation","page":"API Reference","title":"ITU-R P.838 - Rain Specific Attenuation","text":"","category":"section"},{"location":"api/main/#ITUPropagationModels.ItuRP838.rainspecificattenuation","page":"API Reference","title":"ITUPropagationModels.ItuRP838.rainspecificattenuation","text":"rainspecificattenuation(f, el; R, polarization::IturEnum, polarization_angle = nothing)\n\nComputes rain specific attenuation for horizontal polarization based on equation 1 of Section 1.\n\nArguments\n\nf::Float64: frequency (GHz)\nel:Float64: path elevation angle (degrees)\n\nKeyword Arguments\n\nR: rain rate (mm/hr)\npolarization::IturEnum: polarization (EnumHorizontalPolarization, EnumVerticalPolarization, or EnumCircularPolarization). Defaults to circular polarization.\npolarization_angle: Polarization tilt angle (degrees) relative to horizontal polarization (τ = 45° for circular polarization)\nNote: If this is provided, the polarization argument is ignored\n\nReturn\n\nspecific attenuation at given rain rate (dB)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITU-R-P.839-Rain-Height","page":"API Reference","title":"ITU-R P.839 - Rain Height","text":"","category":"section"},{"location":"api/main/#ITUPropagationModels.ItuRP839.rainheightannual","page":"API Reference","title":"ITUPropagationModels.ItuRP839.rainheightannual","text":"rainheightannual(latlon::LatLon)\nrainheightannual(lat::Number, lon::Number)\n\nComputes rain height based on the equation in Section 2. h0 will be interpolated for the given latitude and longitude.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\n\nReturn\n\nhR: mean annual rain height (km) above mean sea level\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITUPropagationModels.ItuRP839.isothermheight","page":"API Reference","title":"ITUPropagationModels.ItuRP839.isothermheight","text":"isothermheight(latlon)\nisothermheight(lat::Number, lon::Number)\n\nCalculates isothermic height based on bilinear interpolation. h0 will be interpolated for the given latitude and longitude.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\n\nReturn\n\nh0: mean annual 0°C isotherm height (km) above mean sea level\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITU-R-P.840-Cloud-and-Fog-Attenuation","page":"API Reference","title":"ITU-R P.840 - Cloud and Fog Attenuation","text":"","category":"section"},{"location":"api/main/#ITUPropagationModels.ItuRP840.cloudattenuation","page":"API Reference","title":"ITUPropagationModels.ItuRP840.cloudattenuation","text":"cloudattenuation(latlon, f, elevation, p)\ncloudattenuation(lat::Number, lon::Number, args...; kwargs...)\n\nComputes annual cloud attenuation along a slant path based on Section 3. \n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\nf: frequency (GHz)\nel: elevation angle (degrees)\np: exceedance probability (%)\n\nReturn\n\nAcloud::Real: slant path cloud attenuation (dB)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITUPropagationModels.ItuRP840.liquidwatercontent","page":"API Reference","title":"ITUPropagationModels.ItuRP840.liquidwatercontent","text":"liquidwatercontent(latlon, p)\nliquidwatercontent(lat::Number, lon::Number, args...; kwargs...)\n\nComputes the integrated liquid water content at a given location and exceedance probability based on the digital annual maps in Part 1 of the Recommendation P.840-8.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\np: exceedance probability (%)   \n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITU-R-P.1511-Topographic-Data","page":"API Reference","title":"ITU-R P.1511 - Topographic Data","text":"","category":"section"},{"location":"api/main/#ITUPropagationModels.ItuRP1511.topographicheight","page":"API Reference","title":"ITUPropagationModels.ItuRP1511.topographicheight","text":"topographicheight(latlon)\ntopographicheight(lat::Number, lon::Number)\n\nCalculates topographic height as per Section 1.1 of ITU-R P.1511-3.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\n\nReturn\n\nI::Real: height (km)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITU-R-P.2145-Surface-Meteorological-Data","page":"API Reference","title":"ITU-R P.2145 - Surface Meteorological Data","text":"","category":"section"},{"location":"api/main/#ITUPropagationModels.ItuRP2145.surfacetemperatureannual","page":"API Reference","title":"ITUPropagationModels.ItuRP2145.surfacetemperatureannual","text":"T̄ₛ = surfacetemperatureannual(latlon; alt = nothing)\nTₛ(p) = surfacetemperatureannual(latlon, p::Real; alt = nothing)\nsurfacetemperatureannual(lat::Number, lon::Number, args...; kwargs...)\n\nComputes annual surface temperature based Section 2 of the P2145-0 Recommendation and assuming the surface to be located at alt km above sea level.\n\nIf the function is called with the LatLon target position as sole positional argument, the function will return the mean surface temperature at the target location following the procedure described in Section 2.2 of the P2145-0 Recommendation. If the optional second argument p is provided, this is interpreted as the target exceedance probability and the function will follow the procedure described in Section 2.1 of the P2145-0 Recommendation.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\np::Real: exceedance probability (%)\n\nKeyword Arguments\n\nalt::Union{Nothing, Real}: altitude (km). If provided as nothing (default) this will be computed based on the location and following Recommendation P1511-3\n\nReturns\n\nT̄ₛ::Float64 or Tₛ(p)::Float64: computed annual surface temperature (°K)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITUPropagationModels.ItuRP2145.surfacewatervapourdensityannual","page":"API Reference","title":"ITUPropagationModels.ItuRP2145.surfacewatervapourdensityannual","text":"ρ̄ₛ = surfacewatervapourdensityannual(latlon; alt = nothing)\nρₛ(p) = surfacewatervapourdensityannual(latlon, p::Real; alt = nothing)\nsurfacewatervapourdensityannual(lat::Number, lon::Number, args...; kwargs...)\n\nComputes annual surface water vapour density based Section 2 of the P2145-0 Recommendation and assuming the surface to be located at alt km above sea level.\n\nIf the function is called with the LatLon target position as sole positional argument, the function will return the mean surface water vapour density at the target location following the procedure described in Section 2.2 of the P2145-0 Recommendation. If the optional second argument p is provided, this is interpreted as the target exceedance probability and the function will follow the procedure described in Section 2.1 of the P2145-0 Recommendation.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\np::Real: exceedance probability (%)\n\nKeyword Arguments\n\nalt::Union{Nothing, Real}: altitude (km). If provided as nothing (default) this will be computed based on the location and following Recommendation P1511-3\n\nReturns\n\nρ̄ₛ::Float64 or ρₛ(p)::Float64: computed annual surface water vapour density (g/m^3)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITUPropagationModels.ItuRP2145.surfacepressureannual","page":"API Reference","title":"ITUPropagationModels.ItuRP2145.surfacepressureannual","text":"P̄ₛ = surfacepressureannual(latlon; alt = nothing)\nPₛ(p) = surfacepressureannual(latlon, p::Real; alt = nothing)\nsurfacepressureannual(lat::Number, lon::Number, args...; kwargs...)\n\nComputes annual surface total barometric pressure based Section 2 of the P2145-0 Recommendation and assuming the surface to be located at alt km above sea level.  \n\nIf the function is called with the LatLon target position as sole positional argument, the function will return the mean total barometric pressure at the target location following the procedure described in Section 2.2 of the P2145-0 Recommendation. If the optional second argument p is provided, this is interpreted as the target exceedance probability and the function will follow the procedure described in Section 2.1 of the P2145-0 Recommendation. \n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\np::Real: exceedance probability (%)\n\nKeyword Arguments\n\nalt::Union{Nothing, Real}: altitude (km). If provided as nothing (default) this will be computed based on the location and following Recommendation P1511-3    \n\nReturns\n\nP̄ₛ::Float64 or Pₛ(p)::Float64: computed annual total barometric pressure (hPa)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITUPropagationModels.ItuRP2145.surfacewatervapourcontentannual","page":"API Reference","title":"ITUPropagationModels.ItuRP2145.surfacewatervapourcontentannual","text":"V̄ₛ = surfacewatervapourcontentannual(latlon; alt = nothing)\nVₛ(p) = surfacewatervapourcontentannual(latlon, p::Real; alt = nothing)\nsurfacewatervapourcontentannual(lat::Number, lon::Number, args...; kwargs...)\n\nComputes annual surface integrated water vapour content based Section 2 of the P2145-0 Recommendation and assuming the surface to be located at alt km above sea level.\n\nIf the function is called with the LatLon target position as sole positional argument, the function will return the mean integrated water vapour content at the target location following the procedure described in Section 2.2 of the P2145-0 Recommendation. If the optional second argument p is provided, this is interpreted as the  target exceedance probability and the function will follow the procedure described in Section 2.1 of the P2145-0 Recommendation.\n\nArguments\n\nlatlon: object representing latitude and longitude, must be convertible to ITUPropagationModels.LatLon\nThis function can also be called with separate latitude and longitude as first two arguments lat and lon as per last method in the signatures above.\np::Real: exceedance probability (%)      \n\nKeyword Arguments\n\nalt::Union{Nothing, Real}: altitude (km). If provided as nothing (default) this will be computed based on the location and following Recommendation P1511-3\n\nReturns\n\nV̄ₛ::Float64 or Vₛ(p)::Float64: computed annual integrated water vapour content (g/m^2)\n\n\n\n\n\n","category":"function"},{"location":"api/main/#ITUPropagationModels.ItuRP2145.annual_surface_values","page":"API Reference","title":"ITUPropagationModels.ItuRP2145.annual_surface_values","text":"annual_surface_values(latlon[, p]; alt = nothing)\n\nThis function is used to provide the annual surface values for variables refrenced in P676 and P618:\n\nP: The total barometric pressure\nT: The surface temperature\nρ: The surface water vapour density\n\nThe function can be called with the outage probability p as second positional argument to compute the statsitical values, or without to compute the mean values.\n\nIt also compute the altitude of the provided location if provided as nothing as kwarg\n\n\n\n\n\n","category":"function"},{"location":"#ITUPropagationModels.jl","page":"Home","title":"ITUPropagationModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia implementation of ITU-R Recommendations for satellite communication link predictions, covering atmospheric propagation effects including cloud, gaseous, rain, and scintillation attenuations.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/JuliaSatcomFramework/ITUPropagationModels.jl\")","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ITUPropagationModels\n\n# Calculate atmospheric attenuation for a satellite link\nlatlon = LatLon(45, 10)  # Location coordinates\nfrequency = 20.0       # GHz\nelevation = 30.0       # degrees\nprobability = 0.01     # % exceedance\n\n# Get all atmospheric attenuations, assume 1m diameter (only used for scintillation attenuation)\nattenuations(latlon, frequency, elevation, probability; D = 1)","category":"page"},{"location":"#Custom-location-types","page":"Home","title":"Custom location types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It is possible to use the various functions of this package on custom types representing locations on earth by defining an appropriate method for Base.convert as shown in the example below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additionally, in case your custom type also contains altitude information, it is possible to provide this information to the package function by adding a custom method to the following function","category":"page"},{"location":"#ITUPropagationModels.altitude_from_location","page":"Home","title":"ITUPropagationModels.altitude_from_location","text":"altitude_from_location(location)\n\nThis function tries to extract the altitude (in km) from the location input provided.\n\nIt defaults to converting the location to latlon with ITUPropagationModels.tolatlon and then calling ItuRP1511.topographicheight on it.\n\nCustom location types that want to implement the interface of ITUPropagationModels should override the ITUPropagationModels.tolatlon method, and optionally the ITUPropagationModels.altitude_from_location method if they already store information about the location altitude.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Here is an example of defining a custom type and making it compatible with the functions from this package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ITUPropagationModels\n\n# We create a custom struct that also stores location (in m) and lat/lon in radians\nstruct LLA\n    lat::Float64\n    lon::Float64\n    alt::Float64\nend\n# Define a convert method to convert to LatLon\nBase.convert(::Type{LatLon}, lla::LLA) = LatLon(lla.lat |> rad2deg, lla.lon |> rad2deg)\n# Define a method to extract the altitude from the custom type, remembering the returned altitude MUST be in km\nITUPropagationModels.altitude_from_location(lla::LLA) = lla.alt / 1e3\n\n# We test with our custom instance of a type\nlla = LLA(deg2rad(30), deg2rad(45), 1200)\n\ncustom = attenuations(lla, 30, 20, .5; D = 1)\nequivalent = attenuations(LatLon(30, 45), 30, 20, .5; D = 1, alt = 1.2)\nprintln(custom)\nprintln(equivalent)","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the API Reference for complete function documentation. ","category":"page"}]
}
